.cards {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-gap: 16px;
}

// Smallest device
@media (min-width: 100px) and (max-width: 575px) {
  .cards {
    grid-template-columns: 1fr;
  }
}

// Small devices (landscape phones, 576px and up)
@media (min-width: 576px) {
  .cards {
    grid-template-columns: 1fr;
  }
}

// Medium devices (tablets, 768px and up)
@media (min-width: 768px) {
  .cards {
    grid-template-columns: 1fr 1fr;
  }
}

// Large devices (desktops, 992px and up)
@media (min-width: 992px) {
  .cards {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

// Extra large devices (large desktops, 1200px and up)
@media (min-width: 1200px) {
  .cards {
    grid-template-columns: 1fr 1fr 1fr;
  }
}

.card-band {
  overflow: hidden;
  background: white;
  box-shadow: 0 0 15px rgba(0,0,0,0.2);
  border-radius: 5px;
}

.card-band > img {
  height: 200px;
  width: 100%;
  object-fit: cover;
}

.card-band h2 {
  font-size: 16px;
  font-weight: bold;
  margin: 0;
}

.card-band p {
  font-size: 12px;
  opacity: .7;
  margin: 0;
}

.card-band .card-band-infos {
  padding: 16px;
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  position: relative;
}

.card-band-infos .card-band-user {
  position: absolute;
  right: 16px;
  top: -20px;
  width: 40px;
}

ul.avatars {
      position: absolute;
      right: 16px;
      top: -20px;
      display: flex; /* Causes LI items to display in row. */
      list-style-type: none ;
      padding: 0px 7px 0px 0px ;
      z-index: 1 ; /* Sets up new stack-container. */
    }

    li.avatars_item {
      height: 49px ;
      margin: 0px 0px 0px 0px ;
      padding: 0px 0px 0px 0px ;
      position: relative ;
      width: 36px ; /* Forces flex items to be smaller than their contents. */
    }

    /*
      These zIndex values will only be relative to the contents of the UL element,
      which sets up its own stack container. As such, these will only be relevant
      to each other, not to the page at large.
      --
      NOTE: We could theoretically get around having to set explicit zIndex values
      by using "flex-direction: row-reverse" and using the natural stacking order
      of the DOM; however, to do that, we'd have to reverse the order of the HTML
      elements, which feels janky and unnatural.
    */
    li.avatars_item:nth-child( 1 ) { z-index: 9 ; }
    li.avatars_item:nth-child( 2 ) { z-index: 8 ; }
    li.avatars_item:nth-child( 3 ) { z-index: 7 ; }
    li.avatars_item:nth-child( 4 ) { z-index: 6 ; }
    li.avatars_item:nth-child( 5 ) { z-index: 5 ; }
    li.avatars_item:nth-child( 6 ) { z-index: 4 ; }
    li.avatars_item:nth-child( 7 ) { z-index: 3 ; }
    li.avatars_item:nth-child( 8 ) { z-index: 2 ; }
    li.avatars_item:nth-child( 9 ) { z-index: 1 ; }

    /*
      These items are all 49px wide while the flex-item (in which they live) is
      only 42px wide. As such, there will be several pixels of overflow content,
      which will be displayed in a reverse-stacking order based on above zIndex.
    */
    img.avatars_img {
      display: block ;
    }

